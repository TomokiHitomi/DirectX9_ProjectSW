//=============================================================================
//
// プレイヤー処理 [cube.h]
// Author : GP12A295 25 人見友基
//
//=============================================================================
#ifndef _CUBE_H_
#define _CUBE_H_

/*******************************************************************************
* インクルード
*******************************************************************************/
#include "object.h"
#include "XModel.h"

//*****************************************************************************
// マクロ定義
//*****************************************************************************
// モデル
#define	CUBE_MODEL			"data/MODEL/cube.x"	// 読み込むモデル名
#define	CUBE_TEXTURE		"data/MODEL/"	// 読み込むモデル名

// モデルの最大数
#define MODEL_CUBE_MAX			(1)

// モデルスケール
#define MODEL_CUBE_SCL			(0.15f)

//*****************************************************************************
// 構造体定義
//*****************************************************************************

//*****************************************************************************
// クラス定義
//*****************************************************************************
class Cube : public ObjectManager
{
private:
	typedef struct
	{
		CXModel			*CXModel;			// モデル格納用
		D3DXVECTOR3		vPos;				// 座標情報
		D3DXVECTOR3		vRot;				// 回転情報
		D3DXVECTOR3		vScl;				// 拡縮情報
		D3DXMATRIX		mtxWorld;			// ワールドマトリクス
		bool			bUse;				// 使用フラグ
	}Prop;
	static Prop m_tagProp;
public:
	enum CUBE
	{	// プレイヤー管理
		CUBE_MAIN,
		CUBE_MAX
	};

	// コンストラクタ（初期化処理）
	Cube(void);
	//デストラクタ（終了処理）
	~Cube(void);

	// 更新処理
	void	Update(void);
	// 描画処理
	void	Draw(void);

	static void SetPos(D3DXVECTOR3 vPos) { m_tagProp.vPos = vPos; }
	D3DXVECTOR3 GetPos(void) { return m_tagProp.vPos; }
private:

};

//*****************************************************************************
// プロトタイプ宣言
//*****************************************************************************

#endif
